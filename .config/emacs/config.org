#+TITLE: Emacs Config
#+AUTHOR: Sen Na
#+DESCRIPTION: My New Emacs Config From Scratch
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#basic][Basic]]
  - [[#packageel][Package.el]]
  - [[#load-meow][Load Meow]]
  - [[#basic-key-bindings][Basic Key Bindings]]
  - [[#turn-off-some-annoyying-things][Turn Off Some Annoyying Things]]
- [[#fonts][FONTS]]
  - [[#basic-1][Basic]]
  - [[#setting-the-font-face][Setting The Font Face]]
  - [[#unicode][Unicode]]
  - [[#emoji-][Emoji ðŸ¥¹]]
  - [[#modeline][Modeline]]
  - [[#mixed-pitch][Mixed Pitch]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#basic-2][Basic]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers][Display Line Numbers]]
  - [[#window-divider-mode][Window Divider Mode]]
  - [[#get-shell-env-loaded][Get Shell Env Loaded]]
  - [[#theme][Theme]]
  - [[#icons][Icons]]
  - [[#modeline-1][Modeline]]
  - [[#which-key][Which Key]]
  - [[#ligatures][Ligatures]]
  - [[#child-frame][Child Frame]]
- [[#org-mode][ORG MODE]]
  - [[#toc][Toc]]
  - [[#org-bullets][Org Bullets]]
  - [[#tag-expansion][Tag Expansion]]
- [[#vertico-with-consult][VERTICO (WITH CONSULT)]]
  - [[#vertico][vertico]]
  - [[#marginaliael][Marginalia.el]]
  - [[#consult][Consult]]
  - [[#embark][Embark]]
- [[#editing][EDITING]]
  - [[#basic-3][Basic]]
  - [[#indent][Indent]]
  - [[#smartparens][Smartparens]]
  - [[#better-jumper][Better Jumper]]
  - [[#goto-last-changed][Goto Last Changed]]
  - [[#trim-whitespaces-ws-butler][Trim Whitespaces (ws-butler)]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#highlight-todos][Highlight TODOs]]
  - [[#git-diff-highlights][Git Diff Highlights]]
  - [[#text-folding][Text Folding]]
- [[#completion][COMPLETION]]
  - [[#corfu][Corfu]]
  - [[#lsp-mode][LSP Mode]]
  - [[#yasnippet][YASnippet]]
- [[#tools][TOOLS]]
  - [[#diagnostics][Diagnostics]]
  - [[#treesitter][Treesitter]]
  - [[#direnv][Direnv]]
  - [[#formatter][Formatter]]
  - [[#version-control-system][Version Control System]]
  - [[#vterm][Vterm]]
  - [[#with-editor][With Editor]]
  - [[#recent-files][Recent Files]]
  - [[#dired][Dired]]
  - [[#yadm-over-magit][YADM over Magit]]
  - [[#emacs-rime][Emacs Rime]]
  - [[#ibuffer][IBuffer]]
  - [[#zoom-window][Zoom Window]]
  - [[#treemacs][Treemacs]]
- [[#languages][LANGUAGES]]
  - [[#programming-languages][Programming languages]]
  - [[#configuration-languages][Configuration languages]]
  - [[#text][Text]]
  - [[#just-tools][Just Tools]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Basic
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (and (file-readable-p custom-file) (load custom-file))

  ;; savehist
  (use-package savehist
    :hook (after-init . savehist-mode)
    :init (setq enable-recursive-minibuffers t ; Allow commands in minibuffers
                history-length 1000
                savehist-additional-variables '(mark-ring
                                                global-mark-ring
                                                search-ring
                                                regexp-search-ring
                                                extended-command-history)
                savehist-autosave-interval 300))
#+end_src
** Package.el
*** Basic
#+begin_src emacs-lisp
  ;; HACK: DO NOT save package-selected-packages to `custom-file'.
  ;; https://github.com/jwiegley/use-package/issues/383#issuecomment-247801751
  (defun my-package--save-selected-packages (&optional value)
    "Set `package-selected-packages' to VALUE but don't save to option `custom-file'."
    (when value
      (setq package-selected-packages value))
    (unless after-init-time
      (add-hook 'after-init-hook #'my-package--save-selected-packages)))
  (advice-add 'package--save-selected-packages :override #'my-package--save-selected-packages)

  (setq package-archives '(("gnu"    . "http://mirrors.bfsu.edu.cn/elpa/gnu/")
                           ("nongnu" . "http://mirrors.bfsu.edu.cn/elpa/nongnu/")
                           ("melpa"  . "http://mirrors.bfsu.edu.cn/elpa/melpa/")))

  (unless (bound-and-true-p package--initialized)
    (setq pacakge-enable-at-startup nil)
    (package-initialize))

  ;; use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-always-ensure t
        use-package-always-defer t
        use-package-expand-minimally t
        use-package-enable-imenu-support t)

  (use-package diminish :ensure t)

  (use-package gnu-elpa-keyring-update)
#+end_src

*** Paradox
#+begin_src emacs-lisp
  ;; A modern Packages Menu
  (use-package paradox
    :custom-face
    (paradox-archive-face ((t (:inherit font-lock-doc-face))))
    (paradox-description-face ((t (:inherit completions-annotations))))
    :hook (emacs-startup . paradox-enable)
    :init (setq paradox-execute-asynchronously t
                paradox-github-token t
                paradox-display-star-count nil
                paradox-status-face-alist ;
                '(("built-in"   . font-lock-builtin-face)
                  ("available"  . success)
                  ("new"        . (success bold))
                  ("held"       . font-lock-constant-face)
                  ("disabled"   . font-lock-warning-face)
                  ("avail-obso" . font-lock-comment-face)
                  ("installed"  . font-lock-comment-face)
                  ("dependency" . font-lock-comment-face)
                  ("incompat"   . font-lock-comment-face)
                  ("deleted"    . font-lock-comment-face)
                  ("unsigned"   . font-lock-warning-face)))
    :config
    (add-hook 'paradox-after-execute-functions
              (lambda (_)
                "Display `page-break-lines' in \"*Paradox Report*\" buffer."
                (when (fboundp 'page-break-lines-mode)
                  (let ((buf (get-buffer "*Paradox Report*"))
                        (inhibit-read-only t))
                    (when (buffer-live-p buf)
                      (with-current-buffer buf
                        (page-break-lines-mode 1))))))
              t))
#+end_src

*** Auto Package Update
#+begin_src emacs-lisp
  (unless (fboundp 'package-upgrade-all)
    (use-package auto-package-update
      :init
      (setq auto-package-update-delete-old-versions t
            auto-package-update-hide-results t)
      (defalias 'package-upgrade-all #'auto-package-update-now)))
#+end_src

** Load Meow

#+begin_src emacs-lisp
  (use-package meow
    :demand t
    :init
    (setq meow-visit-sanitize-completion nil)
    :custom
    (meow-use-cursor-position-hack t)
    (meow-use-clipboard t)
    :config
    (require 'meow)
    (setq meow-replace-state-name-list
          '((normal . "Normal")
            (beacon . "Beacon")
            (insert . "Insert")
            (motion . "Motion")
            (keypad . "Keypad")))
    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
      (meow-motion-overwrite-define-key
       '("j" . meow-next)
       '("k" . meow-prev)
       '("<escape>" . ignore))
      (define-key meow-insert-state-keymap [control-bracketleft] 'meow-insert-exit)
      (define-key meow-keypad-state-keymap [control-bracketleft] 'meow-keypad-quit)
      (meow-leader-define-key
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("ff" . find-file)
       '("fd" . dired)
       '("fs" . save-buffer)
       '("wv" . split-window-right)
       '("ws" . split-window-below)
       '("wo" . other-window)
       '("wh" . windmove-left)
       '("wj" . windmove-down)
       '("wk" . windmove-up)
       '("wl" . windmove-right)
       '("wq" . delete-window)
       '("bi" . ibuffer)
       '("bn" . next-buffer)
       '("bp" . previous-buffer)
       '("bk" . kill-buffer)
       '("bb" . switch-to-buffer))
      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("d" . delete-char) ;; other wise this just runs C-d, which is mapped to scroll-up-command
       '("D" . meow-backward-delete)
       '("e" . meow-next-word)
       '("E" . meow-next-symbol)
       '("f" . meow-find)
       '("g" . meow-cancel-selection)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-next)
       '("J" . meow-next-expand)
       '("k" . meow-prev)
       '("K" . meow-prev-expand)
       '("l" . meow-right)
       '("L" . meow-right-expand)
       '("m" . meow-join)
       '("n" . meow-search)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("p" . meow-yank)
       '("q" . meow-quit)
       '("Q" . meow-goto-line)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-kill)
       '("t" . meow-till)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("w" . meow-mark-word)
       '("W" . meow-mark-symbol)
       '("x" . meow-line)
       '("X" . meow-goto-line)
       '("y" . meow-save)
       '("Y" . meow-sync-grab)
       '("z" . meow-pop-selection)
       '("'" . repeat)
       '("<escape>" . ignore)
       '("C-r" . undo-redo)))
    (meow-setup)
    (meow-global-mode)
    (meow--enable-shims))
#+end_src

** Basic Key Bindings

#+begin_src emacs-lisp
  (global-set-key (kbd "s-x") 'execute-extended-command)
  (define-key input-decode-map (kbd "C-[") [control-bracketleft])
  (with-eval-after-load 'meow
    ;; TODO map RET in normal mode to button-click
    ;; Ref: https://github.com/emacs-evil/evil/blob/c4f95fd9ec284a8284405f84102bfdb74f0ee22f/evil-commands.el#L846-L876
    (defun meow--ret ()
      (interactive)
      (let ((widget (or (get-char-property (point) 'field)
                        (get-char-property (point) 'button)
                        (get-char-property (point) 'widget-doc))))
        (cond
         ((and widget
               (fboundp 'widget-type)
               (fboundp 'widget-button-press)
               (or (and (symbolp widget)
                        (get widget 'widget-type))
                   (and (consp widget)
                        (get (widget-type widget) 'widget-type))))
          (when (fboundp 'widget-button-press)
            (widget-button-press (point))))
         ((and (fboundp 'button-at)
               (fboundp 'push-button)
               (button-at (point)))
          (push-button)))))
    (meow-normal-define-key
     '("RET" . meow--ret)
     '("/" . comment-or-uncomment-region))
    (define-key meow-normal-state-keymap [control-bracketleft] 'meow-cancel)
    (meow-leader-define-key
     ;; Fi le
     '("." . find-file)
     '("fc" . (lambda () (interactive) (let ((default-directory user-emacs-directory)) (call-interactively 'find-file)))))
    (add-hook 'minibuffer-setup-hook (lambda () (local-set-key [control-bracketleft] #'meow-minibuffer-quit)))

    )
#+end_src

** Turn Off Some Annoyying Things
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Disable LockFile and Backup Files
#+begin_src emacs-lisp
  (setq create-lockfiles nil
        make-backup-files nil)
#+end_src

*** Create Backup Files in a Good Place
#+begin_src emacs-lisp
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backups"))))
#+end_src

* FONTS
** Basic
#+begin_src emacs-lisp
  (defun font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (find-font (font-spec :name font-name)))
#+end_src

** Setting The Font Face
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "Sarasa Mono SC"
                      :height 140
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "Sarasa Mono SC"
                      :height 140
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "è‹¹æ–¹-ç®€"
                      :height 150)
#+end_src

** Unicode
#+begin_src emacs-lisp
  (cl-loop for font in '("Segoe UI Symbol" "Symbola" "Symbol")
           when (font-installed-p font)
           return (if (< emacs-major-version 27)
                      (set-fontset-font "fontset-default" 'unicode font nil 'prepend)
                    (set-fontset-font t 'symbol (font-spec :family font) nil 'prepend)))
#+end_src

** Emoji ðŸ¥¹
#+begin_src emacs-lisp
  (set-fontset-font t 'emoji (font-spec :family "Apple Color Emoji" :size 13) nil 'prepend)
#+end_src

** Modeline
#+begin_src emacs-lisp
  ;; Set mode-line font
  ;; Should be done after loading doom-modeline
  (with-eval-after-load 'doom-modeline
    (cl-loop for font in '("è‹¹æ–¹-ç®€" "SF Pro Text" "Helvetica")
             when (font-installed-p font)
             return (progn
                      (set-face-attribute 'mode-line nil :family font :weight 'regular :height 140)
                      (when (facep 'mode-line-active)
                        (set-face-attribute 'mode-line-active nil :family font :weight 'regular :height 140))
                      (set-face-attribute 'mode-line-inactive nil :family font :weight 'regular :height 140))))
#+end_src

** Mixed Pitch
#+begin_src emacs-lisp
  (use-package mixed-pitch
    :hook ((org-mode markdown-mode) . mixed-pitch-mode))
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
** Basic
#+begin_src emacs-lisp
  ;; Optimization
  (setq idle-update-delay 0.1)

  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)
  (setq scroll-step 1
        scroll-margin 0
        scroll-conservatively 100000
        auto-window-vscroll nil)

  (setq fast-but-imprecise-scrolling t)
  (setq redisplay-skip-fontification-on-input t)

  ;; Inhibit resizing frames
  (setq frame-inhibit-implied-resize t
        frame-resize-pixelwise t)

  ;; Initial frame
  (setq initial-frame-alist '((top . 0.5)
                              (left . 0.5)
                              (width . 0.628)
                              (height . 0.8)
                              (fullscreen)))

  ;; MacOS
  (when (featurep 'ns)
    (setq ns-use-thin-smoothing t)
    (setq ns-pop-up-frames nil))
#+end_src
** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
  (unless (eq system-type 'darwin)
    (menu-bar-mode -1))
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display Line Numbers

#+begin_src emacs-lisp
  (use-package display-line-numbers
    :ensure nil
    :hook ((prog-mode yaml-mode yaml-ts-mode conf-mode toml-ts-mode) . display-line-numbers-mode)
    :init (setq display-line-numbers-width-start t))
#+end_src

** Window Divider Mode
#+begin_src emacs-lisp
  (setq window-divider-default-places t
        window-divider-default-bottom-width 1
        window-divider-default-right-width 1)
  (add-hook 'window-setup-hook #'window-divider-mode)
#+end_src

** Get Shell Env Loaded
#+begin_src emacs-lisp
  (when (display-graphic-p)
    (use-package exec-path-from-shell
      :init (exec-path-from-shell-initialize)))
#+end_src

** Theme
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :ensure t
    :init
    (setq catppuccin-flavor 'frappe)
    (load-theme 'catppuccin :no-confirm))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+end_src

** Icons
#+begin_src emacs-lisp
  (use-package nerd-icons)
  (use-package nerd-icons-completion
    :hook (vertico-mode . nerd-icons-completion-mode))
#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom-face
    (mode-line ((t (:weight light))))
    (mode-line-active ((t (:weight light))))
    :init (setq doom-modeline-minor-modes nil
                doom-modeline-height 27))
#+end_src

*** Hide Modeline in Some Modes
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :hook (((treemacs-mode
             eshell-mode shell-mode
             term-mode vterm-mode
             embark-collect-mode
             lsp-ui-imenu-mode
             pdf-annot-list-mode) . turn-on-hide-mode-line-mode)
           (dired-mode . (lambda () (and (bound-and-true-p hide-mode-line-mode)
                                         (turn-off-hide-mode-line-mode))))))
#+end_src

** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :bind ("C-h M-m" . which-key-show-major-mode)
    :hook (after-init . which-key-mode)
    :init (setq which-key-max-description-length 30
                which-key-lighter nil
                which-key-show-remaining-keys t))
#+end_src

** Ligatures
#+begin_src emacs-lisp
  (use-package composite
    :ensure nil
    :init
    (defvar composition-ligature-table (make-char-table nil))
    :hook
    (((prog-mode conf-mode nxml-mode markdown-mode help-mode shell-mode eshell-mode term-mode vterm-mode)
      . (lambda () (setq-local composition-function-table composition-ligature-table))))
    :config
        (let ((alist
             '((33  . ".\\(?:\\(==\\|[!=]\\)[!=]?\\)")
               (35  . ".\\(?:\\(###?\\|_(\\|[(:=?[_{]\\)[#(:=?[_{]?\\)")
               (36  . ".\\(?:\\(>\\)>?\\)")
               (37  . ".\\(?:\\(%\\)%?\\)")
               (38  . ".\\(?:\\(&\\)&?\\)")
               (42  . ".\\(?:\\(\\*\\*\\|[*>]\\)[*>]?\\)")
               ;; (42 . ".\\(?:\\(\\*\\*\\|[*/>]\\).?\\)")
               (43  . ".\\(?:\\([>]\\)>?\\)")
               ;; (43 . ".\\(?:\\(\\+\\+\\|[+>]\\).?\\)")
               (45  . ".\\(?:\\(-[->]\\|<<\\|>>\\|[-<>|~]\\)[-<>|~]?\\)")
               ;; (46 . ".\\(?:\\(\\.[.<]\\|[-.=]\\)[-.<=]?\\)")
               (46  . ".\\(?:\\(\\.<\\|[-=]\\)[-<=]?\\)")
               (47  . ".\\(?:\\(//\\|==\\|[=>]\\)[/=>]?\\)")
               ;; (47 . ".\\(?:\\(//\\|==\\|[*/=>]\\).?\\)")
               (48  . ".\\(?:x[a-zA-Z]\\)")
               (58  . ".\\(?:\\(::\\|[:<=>]\\)[:<=>]?\\)")
               (59  . ".\\(?:\\(;\\);?\\)")
               (60  . ".\\(?:\\(!--\\|\\$>\\|\\*>\\|\\+>\\|-[-<>|]\\|/>\\|<[-<=]\\|=[<>|]\\|==>?\\||>\\||||?\\|~[>~]\\|[$*+/:<=>|~-]\\)[$*+/:<=>|~-]?\\)")
               (61  . ".\\(?:\\(!=\\|/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)[=<>]?\\)")
               (62  . ".\\(?:\\(->\\|=>\\|>[-=>]\\|[-:=>]\\)[-:=>]?\\)")
               (63  . ".\\(?:\\([.:=?]\\)[.:=?]?\\)")
               (91  . ".\\(?:\\(|\\)[]|]?\\)")
               ;; (92 . ".\\(?:\\([\\n]\\)[\\]?\\)")
               (94  . ".\\(?:\\(=\\)=?\\)")
               (95  . ".\\(?:\\(|_\\|[_]\\)_?\\)")
               (119 . ".\\(?:\\(ww\\)w?\\)")
               (123 . ".\\(?:\\(|\\)[|}]?\\)")
               (124 . ".\\(?:\\(->\\|=>\\||[-=>]\\||||*>\\|[]=>|}-]\\).?\\)")
               (126 . ".\\(?:\\(~>\\|[-=>@~]\\)[-=>@~]?\\)"))))
        (dolist (char-regexp alist)
          (set-char-table-range composition-ligature-table (car char-regexp)
                                `([,(cdr char-regexp) 0 font-shape-gstring]))))
      (set-char-table-parent composition-ligature-table composition-function-table))
#+end_src

** Child Frame
#+begin_src emacs-lisp
  (use-package posframe
    :hook (after-load-theme . posframe-delete-all)
    :init
    (defface posframe-border
      `((t (:inherit region)))
      "Face used by the `posframe' border."
      :group 'posframe)
    (defvar posframe-border-width 2
      "Default posframe border width.")
    :config
    (with-no-warnings
      (defun my-posframe--prettify-frame (&rest _)
        (set-face-background 'fringe nil posframe--frame))
      (advice-add #'posframe--create-posframe :after #'my-posframe--prettify-frame)

      (defun posframe-poshandler-frame-center-near-bottom (info)
        (cons (/ (- (plist-get info :parent-frame-width)
                    (plist-get info :posframe-width))
                 2)
              (/ (+ (plist-get info :parent-frame-height)
                    (* 2 (plist-get info :font-height)))
                 2)))))
#+end_src

* ORG MODE
** Toc
#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-enable))
#+end_src

** Org Bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode))
#+end_src

** Tag Expansion

#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (require 'org-tempo)))
#+end_src

* VERTICO (WITH CONSULT)
- vertico.el - VERTical Interactive COmpletion
- orderless
- marginalia
- consult

** vertico
#+begin_src emacs-lisp
  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Only list the commands of the current modes
    (when (boundp 'read-extended-command-predicate)
      (setq read-extended-command-predicate
            #'command-completion-default-include-p))

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))))
    (orderless-component-separator #'orderless-escapable-split-on-space))

  (use-package vertico
    :bind (:map vertico-map
           ("RET" . vertico-directory-enter)
           ("DEL" . vertico-directory-delete-char)
           ("M-DEL" . vertico-directory-delete-word))
    :hook ((after-init . vertico-mode)
           (rfn-eshadow-update-overlay . vertico-directory-tidy)))

  ;; (when (display-graphic-p)
  ;;   (use-package vertico-posframe
  ;;     :hook (vertico-mode . vertico-posframe-mode)
  ;;     :init (setq vertico-posframe-poshandler
  ;;                 #'posframe-poshandler-frame-center-near-bottom
  ;;                 vertico-posframe-parameters
  ;;                 '((left-fringe  . 8)
  ;;                   (right-fringe . 8)))))

  (use-package nerd-icons-completion
    :hook (vertico-mode . nerd-icons-completion-mode))
#+end_src

** Marginalia.el
#+begin_src emacs-lisp
  (use-package marginalia
    :hook (after-init . marginalia-mode))
#+end_src
** Consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h"   . consult-history)
           ("C-c k"   . consult-kmacro)
           ("C-c m"   . consult-man)
           ("C-c i"   . consult-info)
           ("C-c r"   . consult-ripgrep)

           ([remap Info-search]        . consult-info)
           ([remap imenu]              . consult-imenu)
           ([remap isearch-forward]    . consult-line)
           ([remap recentf-open-files] . consult-recent-file)


           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b"   . consult-buffer)              ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#"   . consult-register-load)
           ("M-'"   . consult-register-store)        ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e"   . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch

           ;; Minibuffer history
           :map minibuffer-local-map
           ("C-s" . (lambda ()
                      "Insert the selected region or current symbol at point."
                      (interactive)
                      (insert (save-excursion
                                (set-buffer (window-buffer (minibuffer-selected-window)))
                                (or (and transient-mark-mode mark-active (/= (point) (mark))
                                         (buffer-substring-no-properties (point) (mark)))
                                    (thing-at-point 'symbol t)
                                    "")))))
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element
    ;; Replace bindings. Lazily loaded due by `use-package'.
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config
    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-goto-line
     consult-theme :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help))
#+end_src
*** Define Some Keys
#+begin_src emacs-lisp
  (with-eval-after-load 'meow (meow-leader-define-key '("SPC" . project-find-file)))
#+end_src

*** Extensions
#+begin_src emacs-lisp
  (use-package consult-yasnippet
    :commands consult-yasnippet)
#+end_src

*** My Own Helper Functions
#+begin_src emacs-lisp
  ;; nesting `with-eval-after-load'
  (with-eval-after-load 'consult
    (defun +consult-ripgrep-current-dir (prefix)
      (interactive "P")
      (consult-ripgrep
       (if (not prefix)
           nil
         (if (eq prefix 1)
             t
           (if (buffer-file-name) default-directory t)))))
    (with-eval-after-load 'meow
      (meow-leader-define-key
       '("," . +consult-ripgrep-current-dir))))
#+end_src

** Embark
#+begin_src emacs-lisp
  (use-package embark
    :bind (("s-." . embark-act)
           ("C-s-." . embark-act)
           ("M-." . embark-dwim)
           ("M-s-." . xref-find-definitions)
           ([remap describe-bindings] . embark-bindings))
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))
    :config
    (with-eval-after-load 'which-key
      (defun embark-which-key-indicator ()
        "An embark indicator that displays keymaps using which-key.
   The which-key help message will show the type and value of the
   current target followed by an ellipsis if there are further
   targets."
        (lambda (&optional keymap targets prefix)
          (if (null keymap)
              (which-key--hide-popup-ignore-command)
            (which-key--show-keymap
             (if (eq (plist-get (car targets) :type) 'embark-become)
                 "Become"
               (format "Act on %s '%s'%s"
                       (plist-get (car targets) :type)
                       (embark--truncate-target (plist-get (car targets) :target))
                       (if (cdr targets) "â€¦" "")))
             (if prefix
                 (pcase (lookup-key keymap prefix 'accept-default)
                   ((and (pred keymapp) km) km)
                   (_ (key-binding prefix 'accept-default)))
               keymap)
             nil nil t (lambda (binding)
                         (not (string-suffix-p "-argument" (cdr binding))))))))

      (setq embark-indicators
            '(embark-which-key-indicator
              embark-highlight-indicator
              embark-isearch-highlight-indicator))

      (defun embark-hide-which-key-indicator (fn &rest args)
        "Hide the which-key indicator immediately when using the completing-read prompter."
        (which-key--hide-popup-ignore-command)
        (let ((embark-indicators
               (remq #'embark-which-key-indicator embark-indicators)))
          (apply fn args)))

      (advice-add #'embark-completing-read-prompter
                  :around #'embark-hide-which-key-indicator))
    )

  (use-package embark-consult
    :bind (:map minibuffer-mode-map
                ("C-c C-o" . embark-export))
    :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* EDITING
** Basic
Basic editing tweaks
#+begin_src emacs-lisp
  (setq kill-do-not-save-duplicates t)
  (setq require-final-newline t)
#+end_src

*** Auto Revert
Builtin package autorevert
#+begin_src emacs-lisp
  (use-package autorevert
    :ensure nil
    :diminish
    :hook (after-init . global-auto-revert-mode))
#+end_src

*** Save your last editing place
Builtin package saveplace
#+begin_src emacs-lisp
  (use-package saveplace
    :ensure nil
    :hook (find-file . save-place-mode))
#+end_src

*** So Long Mode
#+begin_src emacs-lisp
  (use-package so-long
    :ensure nil
    :hook (after-init . global-so-long-mode))
#+end_src
** Indent
Some basic behaviors
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 2)

  (setq-default tab-always-indent nil)
#+end_src

#+begin_src emacs-lisp
  ;; (use-package aggressive-indent
  ;;   :config
  ;;   (global-aggressive-indent-mode 1))
#+end_src

*** Dtrt Indent (For guessing Indent)
#+begin_src emacs-lisp
  (use-package dtrt-indent
    :hook (prog-mode . dtrt-indent-mode))
#+end_src

** Smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :hook (prog-mode text-mode markdown-mode)
    :config
    (require 'smartparens-config))
#+end_src

** DONE Better Jumper
Not using better jumper for now
#+begin_src emacs-lisp
  ;; (use-package better-jumper
  ;;   :config
  ;;   (better-jumper-mode +1)
  ;;   (meow-normal-define-key
  ;;     '("C-o" . better-jumper-jump-backward)
  ;;     '("<C-i>" . better-jumper-jump-forward)))
#+end_src
*** TODO need to setup `better-jumper-set-jump` to be able to use it properly

** Goto Last Changed

#+begin_src emacs-lisp
#+end_src

** Trim Whitespaces (ws-butler)
#+begin_src emacs-lisp
(use-package ws-butler
  :hook (prog-mode . ws-butler-mode))
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Highlight TODOs
#+begin_src emacs-lisp
  (use-package hl-todo
    :hook (prog-mode . hl-todo-mode))
#+end_src

** Git Diff Highlights
#+begin_src emacs-lisp
  (use-package diff-hl
    :custom (diff-hl-draw-borders nil)
    :custom-face
    ;; (diff-hl-change ((t (:inherit diff-changed-unspecified :background unspecified))))
    ;; (diff-hl-insert ((t (:inherit diff-added :background unspecified))))
    ;; (diff-hl-delete ((t (:inherit diff-removed :background unspecified))))
    :hook ((after-init . global-diff-hl-mode)
           (after-init . global-diff-hl-show-hunk-mouse-mode)
           (dired-mode . diff-hl-dired-mode))
    :config
    (global-diff-hl-mode)
    (diff-hl-flydiff-mode)
    (setq-default fringes-outside-margins t)
    (with-eval-after-load 'magit
      (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
      (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh)))
#+end_src

** Text Folding
#+begin_src emacs-lisp
  (use-package hideshow
    :ensure nil
    :commands (hs-toggle-hiding)
    :hook (prog-mode . hs-minor-mode)
    :config
    (with-eval-after-load 'meow
      (meow-normal-define-key '(":" . hs-toggle-hiding)))
    )
#+end_src

* COMPLETION

** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-preview-current nil)
    (corfu-auto-delay 0.1)
    (corfu-popupinfo-delay '(0.2 . 0.1))
    :bind ("M-/" . completion-at-point)
    :hook ((after-init . global-corfu-mode)
           (global-corfu-mode . corfu-popupinfo-mode)
           (meow-insert-exit . corfu-quit)))
  (use-package nerd-icons-corfu
    :after corfu
    :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
  ;; Extensions
  (use-package cape
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'cape-abbrev)

    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)
    (advice-add 'eglot-completion-at-point :around #'cape-wrap-noninterruptible)
    )
#+end_src

** LSP Mode
#+begin_src emacs-lisp
  ;; Performance tweaks
  (setq read-process-output-max (* 1024 1024))
  (setenv "LSP_USE_PLISTS" "true")

  (use-package lsp-mode
    :autoload lsp-enable-which-key-integration
    :commands (lsp-format-buffer lsp-organize-imports)
    :hook ((prog-mode . (lambda ()
                          (unless (or (derived-mode-p 'emacs-lisp-mode 'lisp-mode 'makefile-mode 'snippet-mode)
                                      (eq major-mode 'prog-mode))) ;; just bare prog mode
                             (lsp-deferred)))
           (lsp-mode . (lambda ()
                         (lsp-enable-which-key-integration))))
    :custom-face
    (lsp-inlay-hint-type-face ((t (:height 120))))
    (lsp-inlay-hint-parameter-face ((t (:height 120))))
    :bind
    ([remap xref-find-definitions] . lsp-find-definition)
    ([remap xref-find-references] . lsp-find-references)
    :init
    (setq lsp-keymap-prefix "C-c l"
          lsp-keep-workspace-alive nil
          lsp-modeline-code-actions-enable nil
          lsp-modeline-diagnostics-enable nil
          lsp-modeline-workspace-status-enable nil

          lsp-semantic-tokens-enable t
          lsp-progress-spinner-type 'progress-bar-filled

          lsp-enable-file-watchers nil
          lsp-enable-folding nil
          lsp-enable-symbol-highlighting t
          lsp-enable-text-document-color nil

          lsp-enable-indentation nil
          lsp-enable-on-type-formatting nil

          lsp-signature-function #'lsp-signature-posframe

          lsp-inlay-hint-enable t

          ;; disable headerline as it's a bit annoyying
          lsp-headerline-breadcrumb-enable nil

          ;; disable that anoyying warning
          lsp-warn-no-matched-clients nil

          ;; disable auto prompting for server installation
          lsp-enable-suggest-server-download nil)
    :config
    (with-eval-after-load 'nerd-icons
      (defun my-lsp-icons-get-by-file-ext (file-ext &optional feature)
        (when (and file-ext
                   (lsp-icons--enabled-for-feature feature))
          (nerd-icons-icon-for-extension file-ext)))
      (advice-add #'lsp-icons-get-by-file-ext :override #'my-lsp-icons-get-by-file-ext)

      (defvar lsp-symbol-alist
        '((misc          nerd-icons-codicon "nf-cod-symbol_namespace" :face font-lock-warning-face)
          (document      nerd-icons-codicon "nf-cod-symbol_file" :face font-lock-string-face)
          (namespace     nerd-icons-codicon "nf-cod-symbol_namespace" :face font-lock-type-face)
          (string        nerd-icons-codicon "nf-cod-symbol_string" :face font-lock-doc-face)
          (boolean-data  nerd-icons-codicon "nf-cod-symbol_boolean" :face font-lock-builtin-face)
          (numeric       nerd-icons-codicon "nf-cod-symbol_numeric" :face font-lock-builtin-face)
          (method        nerd-icons-codicon "nf-cod-symbol_method" :face font-lock-function-name-face)
          (field         nerd-icons-codicon "nf-cod-symbol_field" :face font-lock-variable-name-face)
          (localvariable nerd-icons-codicon "nf-cod-symbol_variable" :face font-lock-variable-name-face)
          (class         nerd-icons-codicon "nf-cod-symbol_class" :face font-lock-type-face)
          (interface     nerd-icons-codicon "nf-cod-symbol_interface" :face font-lock-type-face)
          (property      nerd-icons-codicon "nf-cod-symbol_property" :face font-lock-variable-name-face)
          (indexer       nerd-icons-codicon "nf-cod-symbol_enum" :face font-lock-builtin-face)
          (enumerator    nerd-icons-codicon "nf-cod-symbol_enum" :face font-lock-builtin-face)
          (enumitem      nerd-icons-codicon "nf-cod-symbol_enum_member" :face font-lock-builtin-face)
          (constant      nerd-icons-codicon "nf-cod-symbol_constant" :face font-lock-constant-face)
          (structure     nerd-icons-codicon "nf-cod-symbol_structure" :face font-lock-variable-name-face)
          (event         nerd-icons-codicon "nf-cod-symbol_event" :face font-lock-warning-face)
          (operator      nerd-icons-codicon "nf-cod-symbol_operator" :face font-lock-comment-delimiter-face)
          (template      nerd-icons-codicon "nf-cod-symbol_snippet" :face font-lock-type-face)))

      (defun lsp-treemacs-symbol-kind->icon (kind)
        (cl-case kind
          (1 'document)
          (2  'namespace)
          (3  'namespace)
          (4  'namespace)
          (5  'class)
          (6  'method)
          (7  'property)
          (8  'field)
          (9  'method)
          (10 'enumerator)
          (11 'interface)
          (12 'method )
          (13 'localvariable)
          (14 'constant)
          (15 'string)
          (16 'numeric)
          (17 'boolean-data)
          (18 'boolean-data)
          (19 'namespace)
          (20 'indexer)
          (21 'boolean-data)
          (22 'enumitem)
          (23 'structure)
          (24 'event)
          (25 'operator)
          (26 'template)
          (t 'misc)))
      (defun my-lsp-icons-get-by-symbol-kind (kind &optional feature)
        (when (and kind
                   (lsp-icons--enabled-for-feature feature))
          (let* ((icon (cdr (assoc (lsp-treemacs-symbol-kind->icon kind) lsp-symbol-alist)))
                 (args (cdr icon)))
            (apply (car icon) args))))
      (advice-add #'lsp-icons-get-by-symbol-kind :override #'my-lsp-icons-get-by-symbol-kind)

      (setq lsp-headerline-arrow (nerd-icons-octicon "nf-oct-chevron_right"
                                                     :face 'lsp-headerline-breadcrumb-separator-face)))
    )

  (use-package consult-lsp
    :after lsp-mode
    :commands consult-lsp-symbols)

  (use-package lsp-ui
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :bind (([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
           ([remap xref-find-references] . lsp-ui-peek-find-references))
    :init
    (setq lsp-ui-sideline-show-diagnostics nil
          lsp-ui-sideline-ignore-duplicate t
          lsp-ui-doc-enable nil
          lsp-ui-doc-delay 0.1
          lsp-ui-doc-show-with-cursor t
          lsp-ui-imenu-auto-refresh 'after-save
          lsp-ui-imenu-buffer-position 'right))
#+end_src

** YASnippet
#+begin_src emacs-lisp
    (use-package yasnippet
      :hook (after-init . yas-global-mode))
    (use-package yasnippet-snippets
      :after yasnippet)
    (use-package yasnippet-capf
      :init (add-to-list 'completion-at-point-functions #'yasnippet-capf))
#+end_src

* TOOLS
** Diagnostics
#+begin_src emacs-lisp
  (use-package flymake
    :hook (prog-mode . flymake-mode)
    :ensure nil
    :init
    (setq flymake-no-changes-timeout nil
          flymake-fringe-indicator-position 'right-fringe)
    :config
    (setq elisp-flymake-byte-compile-load-path (append elisp-flymake-byte-compile-load-path load-path)))

  (use-package sideline-flymake
    :hook (flymake-mode . sideline-mode)
    :init (setq sideline-flymake-display-mode 'point
                sideline-backends-right '(sideline-flymake)))
#+end_src

** Treesitter
#+begin_src emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (global-treesit-auto-mode))
#+end_src

** Direnv
#+begin_src emacs-lisp
      ;; Let's define a `first-file-hook' here
      (use-package envrc
        :hook (find-file . envrc-global-mode)
        :config
        (advice-add #'org-babel-execute-src-block :around #'envrc-propagate-environment))
#+end_src

** Formatter
#+begin_src emacs-lisp
  (use-package format-all
    :commands (format-all-mode format-all-region-or-buffer)
    :config
    (format-all-ensure-formatter)
    (setq-default format-all-formatters '(("C" . (clang-format)))))
#+end_src

** Version Control System
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :init (setq magit-diff-refine-hunk t))
#+end_src

*** Git Timemachine
Walk through git revisions of a file
#+begin_src emacs-lisp
  ;; Walk through git revisions of a file
  (use-package git-timemachine
    :custom-face
    (git-timemachine-minibuffer-author-face ((t (:inherit success :foreground unspecified))))
    (git-timemachine-minibuffer-detail-face ((t (:inherit warning :foreground unspecified))))
    :bind (:map vc-prefix-map
           ("t" . git-timemachine))
    :hook ((git-timemachine-mode . (lambda ()
                                     "Improve `git-timemachine' buffers."
                                     ;; Display different colors in mode-line
                                     (if (facep 'mode-line-active)
                                         (face-remap-add-relative 'mode-line-active 'custom-state)
                                       (face-remap-add-relative 'mode-line 'custom-state))

                                     ;; Highlight symbols in elisp
                                     (and (derived-mode-p 'emacs-lisp-mode)
                                          (fboundp 'highlight-defined-mode)
                                          (highlight-defined-mode t))

                                     ;; Display line numbers
                                     (and (derived-mode-p 'prog-mode 'yaml-mode)
                                          (fboundp 'display-line-numbers-mode)
                                          (display-line-numbers-mode t))))
           (before-revert . (lambda ()
                              (when (bound-and-true-p git-timemachine-mode)
                                (user-error "Cannot revert the timemachine buffer"))))))
#+end_src

*** Browse at Remote
#+begin_src emacs-lisp
  ;; Open github/gitlab/bitbucket page
  (use-package browse-at-remote
    :bind (:map vc-prefix-map
           ("B" . browse-at-remote)))
#+end_src

** Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :init (setq vterm-max-scrollback 20000)
    :config
    (defvar-keymap vterm-normal-mode-map
      "RET" #'vterm-send-return)

    (define-key vterm-normal-mode-map
                [remap yank] #'vterm-yank)
    (define-key vterm-normal-mode-map
                [remap xterm-paste] #'vterm-xterm-paste)
    (define-key vterm-normal-mode-map
                [remap yank-pop] #'vterm-yank-pop)
    (define-key vterm-normal-mode-map
                [remap mouse-yank-primary] #'vterm-yank-primary)
    (define-key vterm-normal-mode-map
                [remap self-insert-command] #'vterm--self-insert)
    (define-key vterm-normal-mode-map
                [remap beginning-of-defun] #'vterm-previous-prompt)
    (define-key vterm-normal-mode-map
                [remap end-of-defun] #'vterm-next-prompt)

    (defun meow-vterm-insert-enter ()
      "Enable vterm default binding in insert and set cursor."
      (use-local-map vterm-mode-map)
      (vterm-goto-char (point)))

    (defun meow-vterm-insert-exit ()
      "Use regular bindings in normal mode."
      (use-local-map vterm-normal-mode-map))

    (defun meow-vterm-setup-hooks ()
      "Configure insert mode for vterm."
      (add-hook 'meow-insert-enter-hook #'meow-vterm-insert-enter nil t)
      (add-hook 'meow-insert-exit-hook #'meow-vterm-insert-exit nil t))

    (add-hook 'vterm-mode-hook #'meow-vterm-setup-hooks)
    (add-hook 'vterm-mode-hook #'(lambda () (display-line-numbers-mode -1))))
  (use-package multi-vterm
    :commands multi-vterm)
#+end_src

** With Editor
So I could still use emacs when I open $EDITOR in vterm
#+begin_src emacs-lisp
  (use-package with-editor
    :hook (vterm-mode . with-editor-export-editor))
#+end_src

** Recent Files
#+begin_src emacs-lisp
  (setq recentf-max-saved-items 100)
  (recentf-mode 1)
  (with-eval-after-load 'meow (meow-leader-define-key '("fr" . consult-recent-file)))
#+end_src

** Dired
*** Icons
#+begin_src emacs-lisp
  (use-package nerd-icons-dired
    :hook (dired-mode . nerd-icons-dired-mode))
#+end_src

*** Dirvish
#+begin_src emacs-lisp
;;    (use-package dirvish
;;      :config
;;      (dirvish-override-dired-mode))
#+end_src

*** Dired Rsync
#+begin_src emacs-lisp
  (use-package dired-rsync
    :commands (dired-rsync dired-rsync-transient))
#+end_src

*** Colorful
#+begin_src emacs-lisp
  (use-package diredfl
    :hook (dired-mode . diredfl-mode))
#+end_src

** YADM over Magit
#+begin_src emacs-lisp
    (defun yadm--files ()
    (let ((default-directory "~/"))
      (cl-delete-if-not
       #'file-exists-p
       (process-lines "yadm" "ls-tree" "--full-tree" "-r" "--name-only" "HEAD"))))

  (defun yadm-find-file ()
    (interactive)
    (let ((default-directory  "~/"))
      (find-file
       (completing-read "Yadm file: " (yadm--files)))))

  (defun yadm-dired ()
    (interactive)
    (let ((default-directory "~/"))
      (with-current-buffer (dired `("*yadm*" ,@(yadm--files)))
        (setq-local revert-buffer-function
                    (lambda (&rest args)
                      (setq dired-directory
                            (cons (car dired-directory)
                                  (yadm--files)))
                      (apply #'dired-revert args))))))

  (define-minor-mode yadm-minor-mode
    "A minor mode for magit yadm buffers."
    :keymap (let ((map (make-sparse-keymap)))
              (define-key map [remap dired] 'yadm-dired)
              (define-key map [remap find-file] 'yadm-find-file)
              map))

  (defun yadm-status ()
    "Display yadm status in magit."
    (interactive)
    (require 'tramp)
    (with-current-buffer (magit-status "/yadm::")
      (yadm-minor-mode 1)))

  (with-eval-after-load 'tramp
    (add-to-list 'tramp-methods
                 '("yadm"
                   (tramp-login-program "yadm")
                   (tramp-login-args (("enter")))
                   (tramp-remote-shell "/bin/bash")
                   (tramp-remote-shell-args ("-c")))))
#+end_src

** Emacs Rime
#+begin_src emacs-lisp
  (use-package rime
    :init
    (setq rime-librime-root (concat user-emacs-directory "librime/dist"))
    :custom
    (default-input-method "rime")
    (rime-user-data-dir "~/Library/Rime")
    (rime-show-candidate 'posframe)
    :bind
    (:map rime-mode-map ("C-`" . 'rime-send-keybinding)))
#+end_src

*** Let Meow Play Nice with Input Methods
#+begin_src emacs-lisp
  (with-eval-after-load 'meow
    (defvar-local +meow-input-method-state nil)
    (add-hook 'meow-insert-enter-hook (lambda () (when +meow-input-method-state (activate-input-method +meow-input-method-state))))
    (add-hook 'meow-insert-exit-hook (lambda () (setq-local +meow-input-method-state current-input-method) (deactivate-input-method)))
    )
#+end_src

** IBuffer
#+begin_src emacs-lisp
  (use-package ibuffer
    :ensure nil
    :commands ibuffer
    :init (setq ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold))))

  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

  (use-package ibuffer-project
    :hook (ibuffer . (lambda ()
                       (setq ibuffer-filter-groups (ibuffer-project-generate-filter-groups))
                       (unless (eq ibuffer-sorting-mode 'project-file-relative)
                         (ibuffer-do-sort-by-project-file-relative))))
    :init (setq ibuffer-project-use-cache t)
    (with-eval-after-load 'nerd-icons
      (defun my-ibuffer-project-group-name (root type)
        "Return group name for project ROOT and TYPE."
        (if (and (stringp type) (> (length type) 0))
            (format "%s %s" type root)
          (format "%s" root)))
      (advice-add #'ibuffer-project-group-name :override #'my-ibuffer-project-group-name)
      (setq ibuffer-project-root-functions
            `((ibuffer-project-project-root . ,(nerd-icons-octicon "nf-oct-repo" :height 1.2 :face ibuffer-filter-group-name-face))
              (file-remote-p . ,(nerd-icons-codicon "nf-cod-radio_tower" :height 1.2 :face ibuffer-filter-group-name-face))))))
#+end_src

** Zoom Window
#+begin_src emacs-lisp
  (use-package zoom-window
    :commands zoom-window-zoom
    :custom
    (zoom-window-mode-line-color "DarkGreen")
    :init
    (zoom-window-setup)
    :config
    (with-eval-after-load 'meow
      (meow-leader-define-key
       '("ww" . zoom-window-zoom))))
#+end_src

** Treemacs
#+begin_src emacs-lisp
  (use-package hydra)
  ;; A tree layout file explorer
  (use-package treemacs
    :commands (treemacs-follow-mode
               treemacs-filewatch-mode
               treemacs-git-mode)
    :hook (treemacs-mode . variable-pitch-mode)
    :custom-face (treemacs-root-face ((t (:height 1.3))))
    :init
    (with-eval-after-load 'meow
      (meow-leader-define-key
       '("e" . treemacs))
      (defun meow--update-cursor-custom-treemacs ()
        (meow--set-cursor-type nil))
      (add-to-list 'meow-update-cursor-functions-alist
                   '((lambda () (eq major-mode 'treemacs-mode)) . meow--update-cursor-custom-treemacs)))
    :config
    (setq treemacs-collapse-dirs           (if treemacs-python-executable 3 0)
          treemacs-missing-project-action  'remove
          treemacs-sorting                 'alphabetic-asc
          treemacs-follow-after-init       t
          treemacs-width                   30)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-project-follow-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (use-package treemacs-nerd-icons
      :demand t
      :custom-face
      (treemacs-nerd-icons-root-face ((t (:inherit nerd-icons-green :height 1.3))))
      (treemacs-nerd-icons-file-face ((t (:inherit nerd-icons-dsilver))))
      :config (treemacs-load-theme "nerd-icons"))

    (use-package treemacs-magit
      :after treemacs
      :hook ((magit-post-commit
              git-commit-post-finish
              magit-post-stage
              magit-post-unstage)
             . treemacs-magit--schedule-update))

    (use-package treemacs-tab-bar
      :demand t
      :config (treemacs-set-scope-type 'Tabs)))
#+end_src

* LANGUAGES
** Programming languages
*** Python
#+begin_src emacs-lisp
  (use-package python
    :ensure nil
    :hook (python-mode . (lambda ()
                           (setq format-all-formatters '(("Python" ruff))))))
  (use-package lsp-pyright
    :after lsp-mode
    :hook (((python-mode python-ts-mode) . (lambda ()
                                             (require 'lsp-pyright)))))
#+end_src

*** Emacs Lisp
#+begin_src emacs-lisp
#+end_src

*** Rust
#+begin_src emacs-lisp
  (use-package rustic)
#+end_src

** Configuration languages

*** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :commands yaml-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . yaml-mode)))
#+end_src
*** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :mode ("\\.json\\'" . json-mode))
  (use-package jq-mode
    :commands jq-interactively
    :mode ("\\.jq\\'" . jq-mode))
#+end_src

** Text

*** Markdown
This is quite essential as ~eglot~ uses this to highlight help buffer.
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown")
    )
#+end_src

** Just Tools

*** Elastic Search
What??
#+begin_src emacs-lisp
  (use-package es-mode
    :mode ("\\.es\\'" . es-mode)
    :config
    (add-hook 'es-mode-hook
              (lambda ()
                (make-local-variable 'request-curl-options)
                (add-to-list 'request-curl-options "--insecure")))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((elasticsearch . t))))
#+end_src
